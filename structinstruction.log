结构体指针说明：
结构体成员指针需要实例化
结构体指针需要实例化
结构体指针的成员指针需要实例化

但是基于以上三点而言，如果说一个结构体指针不实例化就想使用的话，
那么就一定要让他指向一个已经实例化的结构体指针，否则的话会报错
一般说来是段错误或者什么莫名其妙的错误，也就是说，指针在C语言中
不可以不指向某个具体的实际的存储空间，否则的话就会报错。


例如：
#include    
#include    
#include    
  
struct student{   
  char *name;   
  int score;   
  struct student* next;   
}stu,*stu1;    
  
int main(){    
  stu.name = (char*)malloc(sizeof(char)); /*1.结构体成员指针需要初始化*/  
  strcpy(stu.name,"Jimy");   
  stu.score = 99;   
  
  stu1 = (struct student*)malloc(sizeof(struct student));/*2.结构体指针需要初始化*/  
  stu1->name = (char*)malloc(sizeof(char));/*3.结构体指针的成员指针同样需要初始化*/  
  stu.next  = stu1;   
  strcpy(stu1->name,"Lucy");   
  stu1->score = 98;   
  stu1->next = NULL;   
  printf("name %s, score %d \n ",stu.name, stu.score);   
  printf("name %s, score %d \n ",stu1->name, stu1->score);   
  free(stu1);   
  return 0;   
} 
在链表还有树中很多程序是看似直接指向另一个指针的结构体指针，但是实际上他们都是
在最终级的那个要操作的结构体指针中实例化了这个指针的。
容易造成误解

实例化就是malloc出一块实际的存储空间并且对结构体指针进行赋值。
